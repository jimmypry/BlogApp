import java.io.IOException;
import java.sql.* ;
import java.text.SimpleDateFormat;
import java.util.List;
import java.util.ArrayList;
import java.util.Date;
import java.text.DateFormat;

import javax.naming.Context;
import javax.naming.InitialContext;
import javax.servlet.Servlet;
import javax.servlet.ServletException;
import javax.servlet.http.HttpServlet;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.sql.DataSource;

import org.commonmark.node.*;
import org.commonmark.parser.Parser;
import org.commonmark.renderer.html.HtmlRenderer;

/**
 * Servlet implementation class for Servlet: ConfigurationTest
 *
 */
public class Editor extends HttpServlet {
    /**
     * The Servlet constructor
     * 
     * @see javax.servlet.http.HttpServlet#HttpServlet()
     */
    final static String saveNewPost = "INSERT INTO Posts VALUES(?, ?, ?, ?, ?, ?)";
    final static String updatePost = "UPDATE Posts SET title = ?, body = ?, modified = ? WHERE username = ? AND postid = ?";
    final static String deletePost = "DELETE FROM Posts WHERE username = ? AND postid = ?";
    final static String retrieveSinglePost = "SELECT title, body FROM Posts WHERE username = ? AND postid = ?";
    final static String retrieveAllPosts = "SELECT title, created, modified, postid FROM Posts WHERE username = ?";

    static String intermediate = "intermediate failed";
    static String accessDatabaseTest = "accessDatabaseTest Failed";
    static String databaseError = "";
    static String getMaxPostIdError = "";
    // parameters
    static String username;
    static String postIdString;
    static String action;
    // buttons
    static Object saveButton;
    static Object closeButton;
    static Object previewButton;
    static Object deleteButton;
    // attributes
    static String title;
    static String body;

    static Integer maxPostId;

    public Editor() {}
    @Override
    public void init() throws ServletException {
        username = null;
        postIdString = null;
        action = null;
        // buttons
        saveButton = null;
        closeButton = null;
        previewButton = null;
        deleteButton = null;
        // attributes
        title = null;
        body = null;
        maxPostId = getMaxPostId() + 1;
    }
    
    public void destroy()
    {
        /*  write any servlet cleanup code here or remove this function */
    }

    /**
     * Handles HTTP GET requests
     * 
     * @see javax.servlet.http.HttpServlet#doGet(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doGet(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
        // parameters
        action = request.getParameter("action");
        username = request.getParameter("username");
        postIdString = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");

        request.setAttribute("maxPostIdError", getMaxPostIdError);
        request.setAttribute("maxPostId", maxPostId);
        if (action == null) {
            request.getRequestDispatcher("/edit.jsp").forward(request, response);
        }
        if (action.equals("open")) {
            open(username, postIdString, request, response);
        } else if (action.equals("preview")) {
            preview(title, body, request, response);
        } else if (action.equals("list")) {
            display(username, request, response);
        } else {
            request.setAttribute("errorMessage", "Get Method can only take open, preview, and list");
            request.getRequestDispatcher("/error.jsp").forward(request, response);
        }
        //request.setAttribute("test", databaseError);
        //request.setAttribute("test2", accessDatabaseTest);
    }
    
    /**
     * Handles HTTP POST requests
     * 
     * @see javax.servlet.http.HttpServlet#doPost(HttpServletRequest request,
     *      HttpServletResponse response)
     */
    public void doPost(HttpServletRequest request, HttpServletResponse response)
        throws ServletException, IOException 
    {
	// implement your POST method handling code here
	// currently we simply show the page generated by "edit.jsp"

        // buttons
        saveButton = request.getParameter("save");
        closeButton = request.getParameter("close");
        previewButton = request.getParameter("preview");
        deleteButton = request.getParameter("delete");

        // parameters
        action = request.getParameter("action");
        username = request.getParameter("username");
        postIdString = request.getParameter("postid");
        title = request.getParameter("title");
        body = request.getParameter("body");

        request.setAttribute("maxPostIdError", getMaxPostIdError);
        request.setAttribute("maxPostId", maxPostId);
        if (saveButton != null) {
            save(username, "0", title, body);
            display(username, request, response);
        }
        if (closeButton != null) {
            display(username, request, response);
        }
        if (previewButton != null) {
            preview(title, body, request, response);
        }
        if (deleteButton != null) {
            delete(username, postIdString);
            display(username, request, response);
        }

        if (action.equals("open")) {
            open(username, postIdString, request, response);
        } else if (action.equals("delete")) {
            delete(username, postIdString);
            display(username, request, response);
        } else if (action.equals("save")) {
            save(username, postIdString, title, body);
        } else if (action.equals("preview")) {
            preview(title, body, request, response);
        } else if (action.equals("list")) {
            display(username, request, response);
        }
        //request.setAttribute("test", databaseError);
        //request.setAttribute("test2", accessDatabaseTest);
    }

    private static void display(String username, HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        List<List<String>> results = selectAll(username);
        request.setAttribute("result", results);
        request.getRequestDispatcher("/list.jsp").forward(request, response);
    }

    private static void open(String username, String postIdString, HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        List<List<String>> result = null;
        if (title != null || body != null) {
            request.setAttribute("title", title == null? "": title);
            request.setAttribute("body", body == null? "": body);
        } else {
            result = selectSinglePost(username, postIdString);
            if (result.isEmpty()) {
                request.setAttribute("title", "");
                request.setAttribute("body", "");
            } else {
                request.setAttribute("title", result.get(0).get(0));
                request.setAttribute("body", result.get(0).get(1));

            }
        }
        request.setAttribute("test", databaseError);
        request.getRequestDispatcher("/edit.jsp").forward(request, response);
    }

    private static void save(String username, String postidString, String title, String body) {
        Integer postid = null;
        try {
            postid = Integer.parseInt(postidString);
        } catch (NumberFormatException nfe) {
            return;
        }
        if (postid <= 0) {
            insertIntoDatabase(saveNewPost, username, maxPostId, title, body);
            maxPostId++;
        } else {
            updateDatabase(updatePost, username, postid, title, body);
        }
    }

    private static void delete(String username, String postidString) {
        Integer postid = null;
        try {
            postid = Integer.parseInt(postidString);
        } catch (NumberFormatException nfe) {
            return;
        }
        deleteFromDatabase(deletePost, username, postid);
    }

    private static void preview(String title, String body, HttpServletRequest request, HttpServletResponse response)
            throws ServletException, IOException {
        if (title == null) {
            title = "";
        }
        if (body == null) {
            body = "";
        }
        request.setAttribute("title", title);
        request.setAttribute("body", body);

        Parser parserTitle = Parser.builder().build();
        Node document = parserTitle.parse("Title " + "*" + title + "*");
        HtmlRenderer rendererTitle = HtmlRenderer.builder().build();
        String htmlTitle = rendererTitle.render(document);

        Parser parserBody = Parser.builder().build();
        Node documentBody = parserBody.parse("Body " + "*" + body + "*");
        HtmlRenderer rendererBody = HtmlRenderer.builder().build();
        String htmlBody = rendererBody.render(documentBody);

        request.setAttribute("htmlTitle", htmlTitle);
        request.setAttribute("htmlBody", htmlBody);
        request.getRequestDispatcher("/preview.jsp").forward(request, response);
    }

    private static List<List<String>> selectSinglePost(String username, String postidString) {
        Integer postid = null;
        try {
            postid = Integer.parseInt(postidString);
        } catch (NumberFormatException nfe) {
            return new ArrayList<>();
        }
        if (postid <= 0) {
            return new ArrayList<>();
        }
        ResultSet rs = retrieveSingleFromDatabase(retrieveSinglePost, username, postid);
        return getResultList(rs);
    }

    private static List<List<String>> selectAll(String username) {
        ResultSet rs = retrieveAllFromDatabase(retrieveAllPosts, username);
        return getResultList(rs);
    }

    private static List<List<String>> getResultList(ResultSet rs) {
        List<List<String>> results = new ArrayList<>();
        try {
            ResultSetMetaData rsmd = rs.getMetaData();
            int columnNum = rsmd.getColumnCount();
            while (rs.next()) {
                List<String> row = new ArrayList<>();
                for (int i = 1; i <= columnNum; i++) {
                    row.add(rs.getString(i));
                }
                results.add(row);
            }
        } catch (SQLException ex) {
            databaseError = ex.getMessage();
        }
        return results;
    }

    // for insert into databases -- sqlString 1
    private static void insertIntoDatabase(String sqlString, String username, int postid, String title, String body) {
        /* load the driver */
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
        }
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");
            ps = con.prepareStatement(sqlString);

            ps.setString(1, username);
            ps.setInt(2, postid);
            ps.setString(3, title);
            ps.setString(4, body);
            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            Date date = new Date();
            ps.setString(5, dateFormat.format(date));
            ps.setString(6, dateFormat.format(date));

            ps.executeUpdate();
            accessDatabaseTest = "insertIntoDatabaseTest Succeed";
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            accessDatabaseTest = "before try";
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                databaseError += ex.getMessage();
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { ps.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
        }
    }

    // for update -- sqlString2
    private static void updateDatabase(String sqlString, String username, int postid, String title, String body) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
        }
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");
            ps = con.prepareStatement(sqlString);

            ps.setString(1, title);
            ps.setString(2, body);

            DateFormat dateFormat = new SimpleDateFormat("yyyy/MM/dd HH:mm:ss");
            Date date = new Date();
            String modifiedDate = dateFormat.format(date);
            ps.setString(3, modifiedDate);

            ps.setString(4, username);
            ps.setInt(5, postid);
            ps.executeUpdate();
            accessDatabaseTest = "updateDatabaseTest Succeed";
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                databaseError += ex.getMessage();
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { ps.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
        }
    }

    // for delete -- sqlString3
    private static void deleteFromDatabase(String sqlString, String username, int postid) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
        }
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");
            ps = con.prepareStatement(sqlString);
            ps.setString(1, username);
            ps.setInt(2, postid);
            accessDatabaseTest = "deleteFromDatabaseTest Succeed";
            ps.executeUpdate();

        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                databaseError += ex.getMessage();
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { ps.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
        }
    }

    // for retrievePost -- sqlString4
    private static ResultSet retrieveSingleFromDatabase(String sqlString, String username, int postid) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
        }
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");
            ps = con.prepareStatement(sqlString);
            ps.setString(1, username);
            ps.setInt(2, postid);
            rs = ps.executeQuery();
            accessDatabaseTest = "retrieve Succeed";
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                databaseError += ex.getMessage();
                ex = ex.getNextException();
            }
        } finally {
            //try { rs.close(); } catch (Exception e) { /* ignored */ }
            //try { ps.close(); } catch (Exception e) { /* ignored */ }
            //try { con.close(); } catch (Exception e) { /* ignored */ }
        }
        return rs;
    }
    private static ResultSet retrieveAllFromDatabase(String sqlString, String username) {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
        }
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");
            ps = con.prepareStatement(sqlString);
            ps.setString(1, username);
            rs = ps.executeQuery();
            accessDatabaseTest = "retrieve Succeed";
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                databaseError += ex.getMessage();
                ex = ex.getNextException();
            }
        } finally {
            //try { rs.close(); } catch (Exception e) { /* ignored */ }
            //try { ps.close(); } catch (Exception e) { /* ignored */ }
            //try { con.close(); } catch (Exception e) { /* ignored */ }
        }
        return rs;
    }

    private static int getMaxPostId() {
        try {
            Class.forName("com.mysql.jdbc.Driver");
        } catch (ClassNotFoundException ex) {
            System.out.println(ex);
        }
        Connection con = null;
        PreparedStatement ps = null;
        ResultSet rs = null;
        int max = 1;
        try {
            con = DriverManager.getConnection("jdbc:mysql://localhost:3306/CS144", "cs144", "");
            ps = con.prepareStatement("SELECT MAX(postid) FROM Posts");
            accessDatabaseTest = "deleteFromDatabaseTest Succeed";
            rs = ps.executeQuery();
            while (rs.next()) {
                max = rs.getInt(1);
            }
        } catch (SQLException ex){
            System.out.println("SQLException caught");
            System.out.println("---");
            while ( ex != null ) {
                System.out.println("Message   : " + ex.getMessage());
                System.out.println("SQLState  : " + ex.getSQLState());
                System.out.println("ErrorCode : " + ex.getErrorCode());
                System.out.println("---");
                databaseError += ex.getMessage();
                getMaxPostIdError += ex.getMessage();
                ex = ex.getNextException();
            }
        } finally {
            try { rs.close(); } catch (Exception e) { /* ignored */ }
            try { ps.close(); } catch (Exception e) { /* ignored */ }
            try { con.close(); } catch (Exception e) { /* ignored */ }
        }
        return max;
    }
}

